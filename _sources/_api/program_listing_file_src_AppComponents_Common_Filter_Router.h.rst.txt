
.. _program_listing_file_src_AppComponents_Common_Filter_Router.h:

Program Listing for File Router.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_AppComponents_Common_Filter_Router.h>` (``src/AppComponents/Common/Filter/Router.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <AppComponents/Common/Filter/Routing/Types.h>
   #include <AppComponents/Common/Types/Graph/EdgeMap.h>
   #include <AppComponents/Common/Types/Graph/Graph.h>
   #include <AppComponents/Common/Types/Routing/Edge.h>
   #include <AppComponents/Common/Types/Routing/SamplingPoint.h>
   #include <AppComponents/Common/Types/Routing/Statistic.h>
   #include <AppComponents/Common/Types/Street/Segment.h>
   #include <AppComponents/Common/Types/Track/Time.h>
   #include <AppComponents/Common/Types/Track/Velocity.h>
   
   #include <Core/Graph/Routing/Algorithm.h>
   
   #include <ambpipeline/Filter.h>
   
   namespace AppComponents::Common::Filter {
   
   class Router : public ambpipeline::Filter
   {
   public:
       Router(
           double maxVelocityDifference,
           bool allowSelfIntersection,
           double maxAngularDeviation,
           double accountTurningCircleLength,
           double maxSamplingPointSkippingDistance,
           Routing::SamplingPointSkipStrategy samplingPointSkipStrategy,
           double maxCandidateBacktrackingDistance,
           double maxClusteredRoutesLengthDifference,
           Routing::RouteClusterPreference routeClusterPreference);
       bool operator()(
           Types::Routing::SamplingPointList const &,
           Types::Track::TimeList const &,
           Types::Track::VelocityList const &,
           Types::Street::SegmentList const &,
           Types::Graph::Graph const &,
           Types::Graph::GraphEdgeMap const &,
           Types::Graph::StreetIndexMap const &,
           Types::Routing::RouteList &,
           Types::Routing::RoutingStatistic &);
   
   private:
       double const maxVelocityDifference_;
       bool const allowSelfIntersection_;
       double const maxAngularDeviation_;
       double const accountTurningCircleLength_;
       double const maxSamplingPointSkippingDistance_;
       Routing::SamplingPointSkipStrategy const samplingPointSkipStrategy_;
       double const maxCandidateBacktrackingDistance_;
       double const maxClusteredRoutesLengthDifference_;
       Routing::RouteClusterPreference const routeClusterPreference_;
   };
   
   }  // namespace AppComponents::Common::Filter
