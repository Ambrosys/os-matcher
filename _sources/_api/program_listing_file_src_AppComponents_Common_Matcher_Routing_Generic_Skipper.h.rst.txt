
.. _program_listing_file_src_AppComponents_Common_Matcher_Routing_Generic_Skipper.h:

Program Listing for File Skipper.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_AppComponents_Common_Matcher_Routing_Generic_Skipper.h>` (``src/AppComponents/Common/Matcher/Routing/Generic/Skipper.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * SPDX-FileCopyrightText: Â© 2018 Ambrosys GmbH
    *
    * SPDX-FileContributor: Fabian Sandoval Saldias <fabianvss@gmail.com>
    *
    * SPDX-License-Identifier: Apache-2.0
    */
   
   #pragma once
   
   #include <functional>
   #include <unordered_set>
   
   namespace AppComponents::Common::Matcher::Routing::Generic {
   
   class Skipper
   {
   public:
       using CostFunction = std::function<double(size_t, size_t)>;
       enum class Strategy { includeEdgeCosts, excludeEdgeCosts };
   
       Skipper(
           size_t source,
           size_t target,
           size_t lowerBound,
           size_t upperBound,
           std::unordered_set<size_t> const & blocklist,
           CostFunction const & costFunction,
           double costLimit,
           Strategy strategy);
   
       bool isValid() const { return isValid_; }
   
       size_t source() const { return currentSource_; }
   
       size_t target() const { return currentTarget_; }
   
       double cost() const { return currentCost_; }
   
       std::unordered_set<size_t> skipped() const { return skipped_; }
   
       bool next();
   
   private:
       size_t const lowerBound_;
       size_t const upperBound_;
       std::unordered_set<size_t> const & blocklist_;
       CostFunction const & costFunction_;
       double const costLimit_;
       Strategy const strategy_;
   
       bool isValid_{true};
       size_t lastSource_;
       size_t lastTarget_;
       size_t currentSource_;
       size_t currentTarget_;
       double currentCost_{0};
       std::unordered_set<size_t> skipped_;
   };
   
   class SelectiveSkipper
   {
   public:
       SelectiveSkipper(
           size_t source,
           size_t target,
           size_t lowerBound,
           size_t upperBound,
           std::unordered_set<size_t> const & blocklist,
           Skipper::CostFunction const & costFunction,
           double costLimit,
           Skipper::Strategy strategy);
   
       bool isValid() const { return selectedSkipper_ != nullptr; }
   
       size_t source() const { return selectedSkipper_->source(); }
   
       size_t target() const { return selectedSkipper_->target(); }
   
       std::unordered_set<size_t> skipped() const { return selectedSkipper_->skipped(); }
   
       bool next();
   
   private:
       std::array<Skipper, 3> skippers_;
       Skipper * selectedSkipper_{&skippers_[0]};
   };
   
   }  // namespace AppComponents::Common::Matcher::Routing::Generic
